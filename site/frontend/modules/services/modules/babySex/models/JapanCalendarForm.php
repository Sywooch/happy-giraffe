<?php

class JapanCalendarForm extends CFormModel
{
    const IS_BOY = 1;
    const IS_GIRL = 2;
    const IS_UNKNOWN = 0;

    public $mother_m;
    public $father_m;

    public $baby_m;
    public $baby_d;

    public $review_month;
    public $review_year;
    public $num;

    public $arr1 = array(
        1 => array(1, 5, 9, 1, 5, 9, 1, 5, 9, 1, 5, 9),
        2 => array(10, 2, 6, 10, 2, 6, 10, 2, 6, 10, 2, 6),
        3 => array(7, 11, 3, 7, 11, 3, 7, 11, 3, 7, 11, 3),
        4 => array(4, 8, 12, 4, 8, 12, 4, 8, 12, 4, 8, 12),
        5 => array(1, 5, 9, 1, 5, 9, 1, 5, 9, 1, 5, 9),
        6 => array(10, 2, 6, 10, 2, 6, 10, 2, 6, 10, 2, 6),
        7 => array(7, 11, 3, 7, 11, 3, 7, 11, 3, 7, 11, 3),
        8 => array(4, 8, 12, 4, 8, 12, 4, 8, 12, 4, 8, 12),
        9 => array(1, 5, 9, 1, 5, 9, 1, 5, 9, 1, 5, 9),
        10 => array(10, 2, 6, 10, 2, 6, 10, 2, 6, 10, 2, 6),
        11 => array(7, 11, 3, 7, 11, 3, 7, 11, 3, 7, 11, 3),
        12 => array(4, 8, 12, 4, 8, 12, 4, 8, 12, 4, 8, 12),
    );

    public $arr2 = array(
        1 => array(1 => 8, 2 => 12, 3 => 16, 4 => 20, 5 => 24, 6 => 28, 7 => 32, 8 => 36, 9 => 40,
            10 => 44, 11 => 48, 12 => 52, 13 => 56, 14 => 60, 15 => 61, 16 => 62, 17 => 63, 18 => 64, 19 => 65,
            20 => 65, 21 => 65, 22 => 65, 23 => 64, 24 => 64, 25 => 64, 26 => 64, 27 => 64, 28 => 64, 29 => 64, 30 => 64, 31 => 64),
        2 => array(1 => 64, 2 => 64, 3 => 64, 4 => 64, 5 => 65, 6 => 65, 7 => 65, 8 => 60, 9 => 50,
            10 => 40, 11 => 30, 12 => 20, 13 => 10, 14 => 0, 15 => -8, 16 => -16, 17 => -24, 18 => -32, 19 => -40,
            20 => -48, 21 => -56, 22 => -64, 23 => -72, 24 => -80, 25 => -85, 26 => -90, 27 => -90, 28 => -94, 29 => -94, 30 => -94, 31 => -95),
        3 => array(1 => -95, 2 => -92, 3 => -89, 4 => -86, 5 => -82, 6 => -79, 7 => -76, 8 => -73, 9 => -70,
            10 => -67, 11 => -63, 12 => -60, 13 => -57, 14 => -54, 15 => -50, 16 => -47, 17 => -43, 18 => -39, 19 => -35,
            20 => -31, 21 => -27, 22 => -24, 23 => -20, 24 => -16, 25 => -13, 26 => -10, 27 => -7, 28 => -4, 29 => -1, 30 => 0, 31 => 0),
        4 => array(1 => 8, 2 => 12, 3 => 16, 4 => 20, 5 => 24, 6 => 28, 7 => 32, 8 => 36, 9 => 40,
            10 => 44, 11 => 48, 12 => 52, 13 => 56, 14 => 60, 15 => 61, 16 => 62, 17 => 63, 18 => 64, 19 => 65,
            20 => 65, 21 => 65, 22 => 65, 23 => 64, 24 => 64, 25 => 64, 26 => 64, 27 => 64, 28 => 64, 29 => 64, 30 => 64, 31 => 64),
        5 => array(1 => 63, 2 => 62, 3 => 61, 4 => 60, 5 => 60, 6 => 59, 7 => 58, 8 => 57, 9 => 56, 10 => 55, 11 => 55, 12 => 54, 13 => 53, 14 => 52, 15 => 51, 16 => 50, 17 => 50, 18 => 49, 19 => 48, 20 => 47, 21 => 46, 22 => 45, 23 => 45, 24 => 44, 25 => 43, 26 => 42, 27 => 41, 28 => 40, 29 => 40, 30 => 39, 31 => 38),
        6 => array(1 => 37, 2 => 36, 3 => 35, 4 => 33, 5 => 32, 6 => 31, 7 => 30, 8 => 29, 9 => 27, 10 => 26, 11 => 25, 12 => 24, 13 => 23, 14 => 21, 15 => 20, 16 => 19, 17 => 18, 18 => 17, 19 => 16, 20 => 14, 21 => 13, 22 => 12, 23 => 11, 24 => 10, 25 => 8, 26 => 7, 27 => 6, 28 => 5, 29 => 4, 30 => 2, 31 => 1),
        7 => array(1 => 0, 2 => -1, 3 => -2, 4 => -2, 5 => -3, 6 => -4, 7 => -5, 8 => -6, 9 => -6, 10 => -7, 11 => -8, 12 => -9, 13 => -10, 14 => -10, 15 => -11, 16 => -12, 17 => -13, 18 => -14, 19 => -15, 20 => -15, 21 => -16, 22 => -17, 23 => -18, 24 => -19, 25 => -19, 26 => -20, 27 => -21, 28 => -22, 29 => -23, 30 => -23, 31 => -24),
        8 => array(1 => -25, 2 => -25, 3 => -25, 4 => -26, 5 => -26, 6 => -26, 7 => -26, 8 => -26, 9 => -27, 10 => -27, 11 => -27, 12 => -27, 13 => -27, 14 => -28, 15 => -28, 16 => -28, 17 => -28, 18 => -28, 19 => -27, 20 => -27, 21 => -27, 22 => -27, 23 => -27, 24 => -26, 25 => -26, 26 => -26, 27 => -26, 28 => -26, 29 => -25, 30 => -25, 31 => -25),
        9 => array(1 => -25, 2 => -22, 3 => -19, 4 => -16, 5 => -13, 6 => -10, 7 => -7, 8 => -4, 9 => -1, 10 => 2, 11 => 5, 12 => 8, 13 => 11, 14 => 14, 15 => 17, 16 => 20, 17 => 22, 18 => 25, 19 => 28, 20 => 31, 21 => 34, 22 => 37, 23 => 40, 24 => 43, 25 => 46, 26 => 49, 27 => 52, 28 => 55, 29 => 58, 30 => 61, 31 => 61),
        10 => array(1 => 64, 2 => 66, 3 => 69, 4 => 71, 5 => 74, 6 => 76, 7 => 79, 8 => 81, 9 => 84, 10 => 86, 11 => 89, 12 => 91, 13 => 94, 14 => 96, 15 => 90, 16 => 70, 17 => 50, 18 => 30, 19 => 10,
            20 => -10, 21 => -15, 22 => -17, 23 => -18, 24 => -20, 25 => -22, 26 => -25, 27 => -27, 28 => -30, 29 => -32, 30 => -32, 31 => -32),
        11 => array(1 => -32, 2 => -33, 3 => -34, 4 => -34, 5 => -34, 6 => -34, 7 => -33, 8 => -33, 9 => -33, 10 => -33,
            11 => -33, 12 => -33, 13 => -33, 14 => -33, 15 => -33, 16 => -33, 17 => -32, 18 => -32, 19 => -32, 20 => -32,
            21 => -32, 22 => -32, 23 => -32, 24 => -32, 25 => -32, 26 => -32, 27 => -31, 28 => -31, 29 => -31, 30 => -31, 31 => -31),
        12 => array(1 => -32, 2 => -32, 3 => -32, 4 => -32, 5 => -32, 6 => -32, 7 => -32, 8 => -32, 9 => -33, 10 => -33, 11 => -33, 12 => -33, 13 => -33, 14 => -33, 15 => -33, 16 => -33, 17 => -29, 18 => -24, 19 => -20, 20 => -15, 21 => -11, 22 => -7, 23 => -2, 24 => 2, 25 => 7, 26 => 11, 27 => 15, 28 => 20, 29 => 24, 30 => 29, 31 => 29),
        13 => array(1 => 30, 2 => 34, 3 => 39, 4 => 43, 5 => 47, 6 => 51, 7 => 56, 8 => 60, 9 => 64, 10 => 68, 11 => 73, 12 => 77, 13 => 81, 14 => 85, 15 => 90, 16 => 94, 17 => 92, 18 => 90, 19 => 88, 20 => 86, 21 => 84, 22 => 82, 23 => 80, 24 => 77, 25 => 75, 26 => 73, 27 => 71, 28 => 69, 29 => 67, 30 => 65, 31 => 65),
        14 => array(1 => 62, 2 => 62, 3 => 62, 4 => 63, 5 => 63, 6 => 63, 7 => 63, 8 => 63, 9 => 64, 10 => 64, 11 => 64, 12 => 64, 13 => 64, 14 => 65, 15 => 65, 16 => 65, 17 => 57, 18 => 48, 19 => 40, 20 => 31, 21 => 23, 22 => 14, 23 => 6, 24 => -3, 25 => -11, 26 => -20, 27 => -28, 28 => -37, 29 => -45, 30 => -54, 31 => -54),
        15 => array(1 => -62, 2 => -66, 3 => -70, 4 => -74, 5 => -78, 6 => -81, 7 => -85, 8 => -89, 9 => -93, 10 => -93, 11 => -94, 12 => -94, 13 => -94, 14 => -95, 15 => -95, 16 => -95, 17 => -96, 18 => -96, 19 => -96, 20 => -97, 21 => -97, 22 => -87, 23 => -78, 24 => -68, 25 => -58, 26 => -49, 27 => -39, 28 => -29, 29 => -19, 30 => -10, 31 => -10),
        16 => array(1 => 0, 2 => 5, 3 => 10, 4 => 15, 5 => 20, 6 => 25, 7 => 27, 8 => 29, 9 => 31, 10 => 32, 11 => 33, 12 => 33, 13 => 33, 14 => 33, 15 => 32, 16 => 32, 17 => 32, 18 => 32, 19 => 32, 20 => 31, 21 => 31, 22 => 31, 23 => 31, 24 => 31, 25 => 31, 26 => 31, 27 => 31, 28 => 31, 29 => 31, 30 => 31, 31 => 31),
        17 => array(1 => 31, 2 => 31, 3 => 31, 4 => 31, 5 => 31, 6 => 31, 7 => 31, 8 => 31, 9 => 31, 10 => 31, 11 => 31, 12 => 31, 13 => 31, 14 => 31, 15 => 31, 16 => 31, 17 => 31, 18 => 31, 19 => 31, 20 => 31, 21 => 31, 22 => 31, 23 => 31, 24 => 31, 25 => 31, 26 => 31, 27 => 31, 28 => 31, 29 => 31, 30 => 31, 31 => 31,),
        18 => array(1 => 31, 2 => 31, 3 => 31, 4 => 31, 5 => 32, 6 => 32, 7 => 32, 8 => 32, 9 => 32, 10 => 32, 11 => 33, 12 => 33, 13 => 33, 14 => 33, 15 => 33, 16 => 33, 17 => 33, 18 => 34, 19 => 34, 20 => 34, 21 => 34, 22 => 34, 23 => 33, 24 => 33, 25 => 33, 26 => 33, 27 => 32, 28 => 32, 29 => 32, 30 => 31, 31 => 31),
        19 => array(1 => 31, 2 => 29, 3 => 27, 4 => 25, 5 => 23, 6 => 21, 7 => 19, 8 => 17, 9 => 14, 10 => 12, 11 => 10, 12 => 8, 13 => 6, 14 => 4, 15 => 2, 16 => -0, 17 => -2, 18 => -4, 19 => -6, 20 => -8, 21 => -10, 22 => -12, 23 => -14, 24 => -17, 25 => -19, 26 => -21, 27 => -23, 28 => -25, 29 => -27, 30 => -29, 31 => -29),
        20 => array(1 => -31, 2 => -31, 3 => -31, 4 => -32, 5 => -32, 6 => -32, 7 => -32, 8 => -32, 9 => -33, 10 => -33, 11 => -33, 12 => -33, 13 => -33, 14 => -34, 15 => -34, 16 => -34, 17 => -34, 18 => -34, 19 => -35, 20 => -35, 21 => -35, 22 => -35, 23 => -35, 24 => -36, 25 => -36, 26 => -36, 27 => -36, 28 => -36, 29 => -37, 30 => -37, 31 => -37),
        21 => array(1 => -37, 2 => -38, 3 => -38, 4 => -39, 5 => -40, 6 => -40, 7 => -41, 8 => -42, 9 => -43, 10 => -43, 11 => -44, 12 => -45, 13 => -45, 14 => -46, 15 => -47, 16 => -47, 17 => -48, 18 => -49, 19 => -50, 20 => -50, 21 => -51, 22 => -52, 23 => -52, 24 => -53, 25 => -52, 26 => -52, 27 => -51, 28 => -51, 29 => -50, 30 => -50, 31 => -50),
        22 => array(1 => -49, 2 => -43, 3 => -37, 4 => -31, 5 => -25, 6 => -19, 7 => -13, 8 => -7, 9 => -1, 10 => 5, 11 => 11, 12 => 17, 13 => 23, 14 => 29, 15 => 35, 16 => 41, 17 => 47, 18 => 53, 19 => 59, 20 => 65, 21 => 71, 22 => 77, 23 => 83, 24 => 89, 25 => 95, 26 => 85, 27 => 75, 28 => 65, 29 => 55, 30 => 45, 31 => 45),
        23 => array(1 => 35, 2 => 30, 3 => 25, 4 => 19, 5 => 14, 6 => 9, 7 => 4, 8 => -2, 9 => -7, 10 => -12, 11 => -17, 12 => -22, 13 => -28, 14 => -33, 15 => -38, 16 => -39, 17 => -40, 18 => -40, 19 => -41, 20 => -42, 21 => -43, 22 => -43, 23 => -44, 24 => -45, 25 => -46, 26 => -46, 27 => -47, 28 => -48, 29 => -49, 30 => -49, 31 => -49),
        24 => array(1 => -50, 2 => -50, 3 => -51, 4 => -51, 5 => -51, 6 => -51, 7 => -52, 8 => -52, 9 => -52, 10 => -52, 11 => -53, 12 => -53, 13 => -53, 14 => -50, 15 => -47, 16 => -44, 17 => -41, 18 => -38, 19 => -35, 20 => -32, 21 => -29, 22 => -27, 23 => -24, 24 => -21, 25 => -18, 26 => -15, 27 => -12, 28 => -9, 29 => -6, 30 => -3, 31 => 0),
    );

    public function AttributeLabels()
    {
        return array(
            'father_m'=>'месяц рождения отца ребенка',
            'mother_m'=>'месяц рождения матери',
            'baby_d'=>'день зачатия ребенка',
            'baby_m'=>'месяц зачатия ребенка',
        );
    }

    public function rules()
    {
        return array(
            array('father_m, mother_m, baby_m, baby_d', 'required', 'message'=>'Выберите из списка {attribute}'),
            array('review_month, baby_d, baby_m', 'safe'),
        );
    }

    public function beforeValidate()
    {
        if (empty($this->review_month))
            $this->review_month = $this->baby_m;

        return parent::beforeValidate();
    }

    public function CalculateData()
    {
        $this->num = $this->arr1[$this->mother_m][$this->father_m - 1];
        return $this->CalculateMonthData();
    }

    /**
     * Calculate data for baby conception month
     * Result array include arrays like
     * array(
     *     day => 2
     *     who => 1 (boy)
     *     probability => 69 (%)
     *     other_month => false
     * )
     *
     * @return array
     */
    public function CalculateMonthData()
    {
        $data = array();

        $skip = date("w", mktime(0, 0, 0, $this->review_month, 1, $this->review_year)) - 1; // узнаем номер дня недели
        if ($skip < 0)
            $skip = 6;

        $daysInMonth = date("t", mktime(0, 0, 0, $this->review_month, 1, $this->review_year)); // узнаем число дней в месяце
        $day = 1; // для цикла далее будем увеличивать значение
        $num = 1;
        for ($i = 0; $i < 6; $i++) { // Внешний цикл для недель 6 с неполыми

            for ($j = 0; $j < 7; $j++) { // Внутренний цикл для дней недели

                if (($skip > 0) || ($day > $daysInMonth)) { // пустые ячейки до 1 го дня

                    $data[$num] = $this->GetDayData($day, $this->review_month, $this->review_year, $skip);
                    $skip--;

                }
                else {
                    $data[$num] = $this->GetDayData($day, $this->review_month, $this->review_year);
                    $day++; // увеличиваем $day
                }
                $num++;
            }

            if ($day > $daysInMonth)
                break;
        }

        return $data;
    }

    /**
     * Get array with data on current day with skip days
     *
     * @param $day
     * @param $month
     * @param $year
     * @param null $skip
     * @return array
     */
    private function GetDayData($day, $month, $year, $skip = null)
    {
        if ($skip !== null) {
            if ($day == 1) {
                //set month to previous
                $month--;
                if ($month == 0) {
                    $month = 12;
                    $year--;
                }
                $daysInMonth = date("t", mktime(0, 0, 0, $month, 1, $year)); // узнаем число дней в месяце
                $day = $daysInMonth - $skip + 1;
            } else {
                //set month to next
                $month++;
                if ($month == 13) {
                    $month = 1;
                    $year++;
                }
                $day = 1 - $skip;
            }
            return $this->GetStrictDayData($day, $month, $year, true);
        }

        return $this->GetStrictDayData($day, $month, $year, false);
    }

    /**
     * Get array with data on current day
     *
     * @param $day
     * @param $month
     * @param $year
     * @param $other_month
     * @return array
     */
    private function GetStrictDayData($day, $month, $year, $other_month)
    {
        if ($this->num < 7)
            $num = $month + 7 - $this->num;
        else
            $num = $month + 19 - $this->num;

        $probability = $this->arr2[$num][$day];
        if ($probability == 0) {
            $who = self::IS_UNKNOWN;
        } elseif ($probability > 0) {
            $who = self::IS_BOY;
        } else {
            $who = self::IS_GIRL;
            $probability = -$probability;
        }
        return array(
            'day' => $day,
            'sex' => $who,
            'probability' => round($probability /2 + 50),
            'other_month' => $other_month,
            'opacity' => self::Opacity($probability)
        );
    }

    public function GetGender()
    {
        if ($this->num < 7)
            $num = $this->baby_m + 7 - $this->num;
        else
            $num = $this->baby_m + 19 - $this->num;

        $probability = $this->arr2[$num][$this->baby_d];

        if ($probability == 0) {
            $who = self::IS_UNKNOWN;
        } elseif ($probability > 0) {
            $who = self::IS_BOY;
        } else {
            $who = self::IS_GIRL;
        }

        return $who;
    }

    private static function Opacity($prc)
    {
        $opacity = round((abs($prc/2 + 50)) / 20) * 20;
        return $opacity;
    }
}
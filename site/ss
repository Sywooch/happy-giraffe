SELECT SQL_NO_CACHE tu.hidden, tu.thread_id, tu2.user_id AS interlocutor_id, u.first_name, u.last_name, u.online, (SELECT COUNT(*) FROM messaging__messages m INNER JOIN messaging__messages_users mu ON m.id = mu.message_id WHERE m.thread_id = tu.thread_id AND mu.user_id = 12936 AND mu.read = 0) AS unreadMessages
FROM messaging__threads_users tu
INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
INNER JOIN users u ON u.id = tu2.user_id
WHERE tu.user_id = 12936;

SELECT SQL_NO_CACHE tu.hidden, tu.thread_id, tu2.user_id AS interlocutor_id, u.first_name, u.last_name, u.online, COUNT(mu.message_id) AS unreadCount
FROM messaging__threads_users tu
INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
INNER JOIN users u ON u.id = tu2.user_id
LEFT OUTER JOIN messaging__messages m ON m.thread_id = tu.thread_id
LEFT OUTER JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.read = 0 AND mu.user_id = 12936
WHERE tu.user_id = 12936
GROUP BY tu.thread_id;

SELECT
    tu.hidden AS threadHiddenStatus,
    tu.thread_id AS threadId,
    tu2.user_id AS interlocutorId,
    u.first_name AS interlocutorFirstName,
    u.last_name AS interlocutorLastName,
    u.online AS interlocutorOnlineStatus,
    COUNT(mu.message_id) AS threadUnreadCount
FROM messaging__threads_users tu
INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
INNER JOIN users u ON u.id = tu2.user_id
LEFT OUTER JOIN messaging__messages m ON m.thread_id = tu.thread_id
LEFT OUTER JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.read = 0 AND mu.user_id = 12936
WHERE tu.user_id = 12936
GROUP BY tu.thread_id

SELECT SQL_NO_CACHE
    tu.hidden AS threadHiddenStatus,
    tu.thread_id AS threadId,
    tu2.user_id AS interlocutorId,
    u.first_name AS interlocutorFirstName,
    u.last_name AS interlocutorLastName,
    u.online AS interlocutorOnlineStatus,
    t.updated AS threadUpdated,
    COUNT(mu.message_id) AS threadUnreadCount
FROM messaging__threads_users tu
INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
INNER JOIN users u ON u.id = tu2.user_id
INNER JOIN messaging__threads t ON t.id = tu.thread_id
LEFT OUTER JOIN messaging__messages m ON m.thread_id = tu.thread_id
LEFT OUTER JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.read = 0 AND mu.user_id = 12936
WHERE tu.user_id = 12936
GROUP BY tu.thread_id;

SELECT SQL_NO_CACHE u.id, u.first_name, u.last_name, u.online
FROM users u
WHERE u.id IN (
    SELECT u2.id
    FROM users u2
    JOIN friends ON (u2.id = friends.user1_id AND friends.user2_id = 12936) OR (u2.id = friends.user2_id AND friends.user1_id = 12936)
);

SELECT SQL_NO_CACHE u.id, u.first_name, u.last_name, u.online
FROM users u
WHERE u.id IN (
    SELECT tu2.user_id
    FROM messaging__threads_users tu
    INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
    WHERE tu.user_id = 12936
);


SELECT u.id, u.first_name, u.last_name, u.online
FROM users u
WHERE u.id IN (
    SELECT u2.id
    FROM users u2
    JOIN friends ON (u2.id = friends.user1_id AND friends.user2_id = 10) OR (u2.id = friends.user2_id AND friends.user1_id = 10)
) OR u.id IN (
    SELECT tu2.user_id
    FROM messaging__threads_users tu
    INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 10
    WHERE tu.user_id = 10
);



SELECT user1_id
FROM friends
WHERE user2_id =12936
UNION
SELECT user2_id
FROM friends
WHERE user1_id =12936
UNION
SELECT tu2.user_id
FROM messaging__threads_users tu
INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
WHERE tu.user_id = 12936

SELECT u.id, u.first_name, u.last_name, u.online
FROM users u
WHERE u.id IN (
    SELECT user1_id
    FROM friends
    WHERE user2_id = 12936
    UNION
    SELECT user2_id
    FROM friends
    WHERE user1_id = 12936
    UNION
    SELECT tu2.user_id
    FROM messaging__threads_users tu
    INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
    WHERE tu.user_id = 12936
);

SELECT SQL_NO_CACHE
    u.id, # ID собеседника
    u.first_name, # Имя собеседника
    u.last_name, # Фамилия собеседника
    u.online, # Онлайн-статус собеседника
    friends.created IS NOT NULL AS isFriend, # Является ли другом
    t.id, # ID Диалога
    t.updated, # Дата последнего обновления диалога
    tu2.hidden, # Видимость диалога
    COUNT(m.id) AS unreadCount, # Количество непрочитанных сообщений
    p.fs_name # Аватар
# Таблица ID всех пользователей в контактах
FROM (
    # Пользователей, находящиеся в друзьях вне зависимости от наличия или отсутствия переписки с ними
    SELECT user1_id AS uId
    FROM friends
    WHERE user2_id = 12936
    UNION
    SELECT user2_id AS uId
    FROM friends
    WHERE user1_id = 12936
    UNION
    # Пользователи, с которыми когда-либо была переписка
    SELECT tu2.user_id AS uId
    FROM messaging__threads_users tu
    INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
    WHERE tu.user_id = 12936
) uIds
# Связывание с таблицей пользователей для получения данных о собеседнике
INNER JOIN users u ON u.id = uIds.uId
# Связывание с таблицей друзей для установления, является ли собеседник другом
LEFT OUTER JOIN friends ON (u.id = friends.user1_id AND friends.user2_id = 12936) OR (u.id = friends.user2_id AND friends.user1_id = 12936)
# Связывание с таблицей участников диалога для получения ID и видимости диалога
LEFT OUTER JOIN messaging__threads_users tu ON tu.user_id = u.id
LEFT OUTER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id = 12936
# Связывание с таблицей диалогов для получения данных о диалоге
LEFT OUTER JOIN messaging__threads t ON t.id = tu2.thread_id
# Связывание с таблицами сообщений и получателей сообщения для получения количества непрочитанных сообщений
LEFT OUTER JOIN messaging__messages m ON m.thread_id = t.id
LEFT OUTER JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.read = 0 AND mu.user_id = 12936
# Связывание с таблицей фотогрфий для получения аватара
LEFT OUTER JOIN album__photos p ON u.avatar_id = p.id
# Условие для корректной работы связывание с таблицей участников диалога
WHERE tu.user_id IS NULL OR (tu.user_id IS NOT NULL AND tu2.user_id IS NOT NULL)
GROUP BY t.id;

SELECT SQL_NO_CACHE
    u.id AS uId, # ID собеседника
    u.first_name, # Имя собеседника
    u.last_name, # Фамилия собеседника
    u.online, # Онлайн-статус собеседника
    t.id AS tId, # ID Диалога
    t.updated, # Дата последнего обновления диалога
    tu2.hidden, # Видимость диалога
    COUNT(m.id) AS unreadCount, # Количество непрочитанных сообщений
    friends.created IS NOT NULL AS isFriend # Является ли другом
# Таблица ID всех пользователей в контактах
FROM (
    # Пользователей, находящиеся в друзьях вне зависимости от наличия или отсутствия переписки с ними
    SELECT user1_id AS uId
    FROM friends
    WHERE user2_id = 12936
    UNION
    SELECT user2_id AS uId
    FROM friends
    WHERE user1_id = 12936
    UNION
    # Пользователи, с которыми когда-либо была переписка
    SELECT tu2.user_id AS uId
    FROM messaging__threads_users tu
    INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
    WHERE tu.user_id = 12936
) uIds
# Связывание с таблицей пользователей для получения данных о собеседнике
INNER JOIN users u ON u.id = uIds.uId
# Связывание с таблицей друзей для установления, является ли собеседник другом
LEFT OUTER JOIN friends ON (u.id = friends.user1_id AND friends.user2_id = 12936) OR (u.id = friends.user2_id AND friends.user1_id = 12936)
# Связывание с таблицей участников диалога для получения ID и видимости диалога
LEFT OUTER JOIN messaging__threads_users tu ON tu.user_id = u.id
LEFT OUTER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id = 12936
# Связывание с таблицей диалогов для получения данных о диалоге
LEFT OUTER JOIN messaging__threads t ON t.id = tu2.thread_id
# Связывание с таблицами сообщений и получателей сообщения для получения количества непрочитанных сообщений
LEFT OUTER JOIN messaging__messages m ON m.thread_id = t.id
LEFT OUTER JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.read = 0 AND mu.user_id = 12936
# Условие для корректной работы связывание с таблицей участников диалога
WHERE tu.user_id IS NULL OR (tu.user_id IS NOT NULL AND tu2.user_id IS NOT NULL)
GROUP BY t.id;

SELECT SQL_NO_CACHE
    u.id AS uId, # ID собеседника
    u.first_name, # Имя собеседника
    u.last_name, # Фамилия собеседника
    u.online, # Онлайн-статус собеседника
    t.id AS tId, # ID Диалога
    t.updated, # Дата последнего обновления диалога
    tu2.hidden, # Видимость диалога
    COUNT(mu.message_id) AS unreadCount, # Количество непрочитанных сообщений
    friends.created IS NOT NULL AS isFriend # Является ли другом
# Таблица ID всех пользователей в контактах
FROM (
    # Пользователей, находящиеся в друзьях вне зависимости от наличия или отсутствия переписки с ними
    SELECT user1_id AS uId
    FROM friends
    WHERE user2_id = 12936
    UNION
    SELECT user2_id AS uId
    FROM friends
    WHERE user1_id = 12936
    UNION
    # Пользователи, с которыми когда-либо была переписка
    SELECT tu2.user_id AS uId
    FROM messaging__threads_users tu
    INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
    WHERE tu.user_id = 12936
) uIds
# Связывание с таблицей пользователей для получения данных о собеседнике
INNER JOIN users u ON u.id = uIds.uId
# Связывание с таблицей друзей для установления, является ли собеседник другом
LEFT OUTER JOIN friends ON (u.id = friends.user1_id AND friends.user2_id = 12936) OR (u.id = friends.user2_id AND friends.user1_id = 12936)
# Связывание с таблицей участников диалога для получения ID и видимости диалога
LEFT OUTER JOIN messaging__threads_users tu ON tu.user_id = u.id
LEFT OUTER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id = 12936
# Связывание с таблицей диалогов для получения данных о диалоге
LEFT OUTER JOIN messaging__threads t ON t.id = tu2.thread_id
# Связывание с таблицами сообщений и получателей сообщения для получения количества непрочитанных сообщений
LEFT OUTER JOIN messaging__messages m ON m.thread_id = t.id
LEFT OUTER JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.read = 0 AND mu.user_id = 12936
# Условие для корректной работы связывание с таблицей участников диалога
WHERE tu.user_id IS NULL OR (tu.user_id IS NOT NULL AND tu2.user_id IS NOT NULL)
GROUP BY u.id;

SELECT
    u.id AS uId, # ID собеседника
    u.first_name, # Имя собеседника
    u.last_name, # Фамилия собеседника
    u.online, # Онлайн-статус собеседника
    t.id AS tId, # ID Диалога
    tu2.hidden, # Видимость диалога
    p.fs_name, # Аватар
    UNIX_TIMESTAMP(t.updated) AS updated, # Дата последнего обновления диалога
    COUNT(mu.message_id) AS unreadCount, # Количество непрочитанных сообщений
    friends.created IS NOT NULL AS isFriend # Является ли другом
# Таблица ID всех пользователей в контактах
FROM (
    # Пользователей, находящиеся в друзьях вне зависимости от наличия или отсутствия переписки с ними
    SELECT user1_id AS uId
    FROM friends
    WHERE user2_id = 12936
    UNION
    SELECT user2_id AS uId
    FROM friends
    WHERE user1_id = 12936
    UNION
    # Пользователи, с которыми когда-либо была переписка
    SELECT tu2.user_id AS uId
    FROM messaging__threads_users tu
    INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
    WHERE tu.user_id = 12936
) uIds
# Связывание с таблицей пользователей для получения данных о собеседнике
INNER JOIN users u ON u.id = uIds.uId
# Связывание с таблицей друзей для установления, является ли собеседник другом
LEFT OUTER JOIN friends ON (u.id = friends.user1_id AND friends.user2_id = 12936) OR (u.id = friends.user2_id AND friends.user1_id = 12936)
# Связывание с таблицей участников диалога для получения ID и видимости диалога
LEFT OUTER JOIN messaging__threads_users tu ON tu.user_id = u.id
LEFT OUTER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id = 12936
# Связывание с таблицей диалогов для получения данных о диалоге
LEFT OUTER JOIN messaging__threads t ON t.id = tu2.thread_id
# Связывание с таблицами сообщений и получателей сообщения для получения количества непрочитанных сообщений
LEFT OUTER JOIN messaging__messages m ON m.thread_id = t.id
LEFT OUTER JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.read = 0 AND mu.user_id = 12936
# Связывание с таблицей фотографий для получения аватара
LEFT OUTER JOIN album__photos p ON u.avatar_id = p.id
# Условие для корректной работы связывание с таблицей участников диалога
WHERE tu.user_id IS NULL OR (tu.user_id IS NOT NULL AND tu2.user_id IS NOT NULL)
GROUP BY u.id;

SELECT SQL_NO_CACHE
    u.id AS uId, # ID собеседника
    u.first_name, # Имя собеседника
    u.last_name, # Фамилия собеседника
    u.online, # Онлайн-статус собеседника
    t.id AS tId, # ID Диалога
    tu2.hidden, # Видимость диалога
    p.fs_name, # Аватар
    UNIX_TIMESTAMP(t.updated) AS updated, # Дата последнего обновления диалога
    COUNT(mu.message_id) AS unreadCount, # Количество непрочитанных сообщений
    friends.created IS NOT NULL AS isFriend # Является ли другом
# Таблица ID всех пользователей в контактах
FROM (
    # Пользователей, находящиеся в друзьях вне зависимости от наличия или отсутствия переписки с ними
    SELECT user1_id AS uId
    FROM friends
    WHERE user2_id = 22
    UNION
    SELECT user2_id AS uId
    FROM friends
    WHERE user1_id = 22
    UNION
    # Пользователи, с которыми когда-либо была переписка
    SELECT tu2.user_id AS uId
    FROM messaging__threads_users tu
    INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 22
    WHERE tu.user_id = 22
) uIds
# Связывание с таблицей пользователей для получения данных о собеседнике
INNER JOIN users u ON u.id = uIds.uId
# Связывание с таблицей друзей для установления, является ли собеседник другом
LEFT OUTER JOIN friends ON (u.id = friends.user1_id AND friends.user2_id = 22) OR (u.id = friends.user2_id AND friends.user1_id = 22)
# Связывание с таблицей участников диалога для получения ID и видимости диалога
LEFT OUTER JOIN messaging__threads_users tu ON tu.user_id = u.id
LEFT OUTER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id = 22
# Связывание с таблицей диалогов для получения данных о диалоге
LEFT OUTER JOIN messaging__threads t ON t.id = tu2.thread_id
# Связывание с таблицами сообщений и получателей сообщения для получения количества непрочитанных сообщений
LEFT OUTER JOIN messaging__messages m ON m.thread_id = t.id AND m.author_id != 22
LEFT OUTER JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.read = 0 AND mu.user_id = 22
# Связывание с таблицей фотографий для получения аватара
LEFT OUTER JOIN album__photos p ON u.avatar_id = p.id
# Условие для корректной работы связывание с таблицей участников диалога
WHERE tu.user_id IS NULL OR (tu.user_id IS NOT NULL AND tu2.user_id IS NOT NULL)
GROUP BY u.id;

SELECT
    u.id AS uId, # ID собеседника
    u.first_name, # Имя собеседника
    u.last_name, # Фамилия собеседника
    u.online, # Онлайн-статус собеседника
    t.id AS tId, # ID Диалога
    tu2.hidden, # Видимость диалога
    p.fs_name, # Аватар
    UNIX_TIMESTAMP(t.updated) AS updated, # Дата последнего обновления диалога
    COUNT(mu.message_id) AS unreadCount, # Количество непрочитанных сообщений
    friends.created IS NOT NULL AS isFriend # Является ли другом
# Таблица ID всех пользователей в контактах
FROM (
    # Пользователей, находящиеся в друзьях вне зависимости от наличия или отсутствия переписки с ними
    SELECT user1_id AS uId
    FROM friends
    WHERE user2_id = 12936
    UNION
    SELECT user2_id AS uId
    FROM friends
    WHERE user1_id = 12936
    UNION
    # Пользователи, с которыми когда-либо была переписка
    SELECT tu2.user_id AS uId
    FROM messaging__threads_users tu
    INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
    WHERE tu.user_id = 12936
) uIds
# Связывание с таблицей пользователей для получения данных о собеседнике
INNER JOIN users u ON u.id = uIds.uId
# Связывание с таблицей друзей для установления, является ли собеседник другом
LEFT OUTER JOIN friends ON (u.id = friends.user1_id AND friends.user2_id = 12936) OR (u.id = friends.user2_id AND friends.user1_id = 12936)
# Связывание с таблицей участников диалога для получения ID и видимости диалога
LEFT OUTER JOIN messaging__threads_users tu ON tu.user_id = u.id
LEFT OUTER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id = 12936
# Связывание с таблицей диалогов для получения данных о диалоге
LEFT OUTER JOIN messaging__threads t ON t.id = tu2.thread_id
# Связывание с таблицами сообщений и получателей сообщения для получения количества непрочитанных сообщений
LEFT OUTER JOIN messaging__messages m ON m.thread_id = t.id AND m.author_id != 12936
LEFT OUTER JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.read = 0 AND mu.user_id = 12936
# Связывание с таблицей фотографий для получения аватара
LEFT OUTER JOIN album__photos p ON u.avatar_id = p.id
# Условие для корректной работы связывание с таблицей участников диалога
WHERE tu.user_id IS NULL OR (tu.user_id IS NOT NULL AND tu2.user_id IS NOT NULL)
GROUP BY u.id;

SELECT
    m.id,
    m.author_id,
    m.text,
    UNIX_TIMESTAMP(m.created) AS created,
    mu.read,
    mu2.deleted
FROM messaging__messages m
JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.user_id != m.author_id
JOIN messaging__messages_users mu2 ON m.id = mu2.message_id AND mu2.user_id = m.author_id
WHERE m.thread_id = 1110 AND mu2.deleted = 0

SELECT
    m.id,
    m.author_id,
    m.text,
    UNIX_TIMESTAMP(m.created) AS created,
    mu.deleted,
    mu2.read
FROM messaging__messages m
JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.user_id = m.author_id
JOIN messaging__messages_users mu2 ON m.id = mu2.message_id AND mu2.user_id != m.author_id
WHERE m.thread_id = 1110 AND mu.deleted = 0;

SELECT
    u.id AS uId, # ID собеседника
    u.first_name, # Имя собеседника
    u.last_name, # Фамилия собеседника
    u.gender, # Пол собеседника
    u.online, # Онлайн-статус собеседника
    t.id AS tId, # ID Диалога
    tu2.hidden, # Видимость диалога
    p.fs_name, # Аватар
    UNIX_TIMESTAMP(t.updated) AS updated, # Дата последнего обновления диалога
    COUNT(mu.message_id) AS unreadCount, # Количество непрочитанных сообщений
    friends.created IS NOT NULL AS isFriend # Является ли другом
# Таблица ID всех пользователей в контактах
FROM (
    # Пользователей, находящиеся в друзьях вне зависимости от наличия или отсутствия переписки с ними
    SELECT user1_id AS uId
    FROM friends
    WHERE user2_id = 12936
    UNION
    SELECT user2_id AS uId
    FROM friends
    WHERE user1_id = 12936
    UNION
    # Пользователи, с которыми когда-либо была переписка
    SELECT tu2.user_id AS uId
    FROM messaging__threads_users tu
    INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != 12936
    WHERE tu.user_id = 12936
) uIds
# Связывание с таблицей пользователей для получения данных о собеседнике
INNER JOIN users u ON u.id = uIds.uId
# Связывание с таблицей друзей для установления, является ли собеседник другом
LEFT OUTER JOIN friends ON (u.id = friends.user1_id AND friends.user2_id = 12936) OR (u.id = friends.user2_id AND friends.user1_id = 12936)
# Связывание с таблицей участников диалога для получения ID и видимости диалога
LEFT OUTER JOIN messaging__threads_users tu ON tu.user_id = u.id
LEFT OUTER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id = 12936
# Связывание с таблицей диалогов для получения данных о диалоге
LEFT OUTER JOIN messaging__threads t ON t.id = tu2.thread_id
# Связывание с таблицами сообщений и получателей сообщения для получения количества непрочитанных сообщений
LEFT OUTER JOIN messaging__messages m ON m.thread_id = t.id AND m.author_id != 12936
LEFT OUTER JOIN messaging__messages_users mu ON m.id = mu.message_id AND mu.read = 0 AND mu.user_id = 12936
# Связывание с таблицей фотографий для получения аватара
LEFT OUTER JOIN album__photos p ON u.avatar_id = p.id

# Условие для корректной работы связывание с таблицей участников диалога
WHERE tu.user_id IS NULL OR (tu.user_id IS NOT NULL AND tu2.user_id IS NOT NULL)
GROUP BY u.id;

<!--AdFox START-->
<!--giraffe-->
<!--Площадка: Весёлый Жираф / * / *-->
<!--Тип баннера: 240x400-->
<!--Расположение: <середина страницы>-->
<script type="text/javascript">
<!--
if (typeof(pr) == 'undefined') { var pr = Math.floor(Math.random() * 1000000); }
var addate = new Date();
document.write('<iframe src="http://ads.adfox.ru/211012/getCode?pp=h&amp;ps=bkqy&amp;p2=u&amp;p3=b&amp;p4=a&amp;pct=a&amp;plp=a&amp;pli=a&amp;pop=a&amp;pr=' + pr + '&amp;pt=b&amp;pd=' + addate.getDate() + '&amp;pw=' + addate.getDay() + '&amp;pv=' + addate.getHours() + '" frameBorder="0" width="240" height="400" marginWidth="0" marginHeight="0" scrolling="no" style="border: 0px; margin: 0px; padding: 0px;"><a href="http://ads.adfox.ru/211012/goDefaultLink?pp=h&amp;ps=bkqy&amp;p2=u&amp;" target="_blank"><img src="http://ads.adfox.ru/211012/getDefaultImage?pp=h&amp;ps=bkqy&amp;p2=u" border="0" alt=""><\/a><\/iframe>');
//-->
</script>
<noscript>
<iframe src="http://ads.adfox.ru/211012/getCode?pp=h&amp;ps=bkqy&amp;p2=u&amp;p3=b&amp;p4=a&amp;pct=a&amp;plp=a&amp;pli=a&amp;pop=a&amp;pr=' + pr + '&amp;pt=b&amp;pd=' + addate.getDate() + '&amp;pw=' + addate.getDay() + '&amp;pv=' + addate.getHours() + '" frameBorder="0" width="240" height="400" marginWidth="0" marginHeight="0" scrolling="no" style="border: 0px; margin: 0px; padding: 0px;"><a href="http://ads.adfox.ru/211012/goDefaultLink?pp=h&amp;ps=bkqy&amp;p2=u&amp;" target="_blank"><img src="http://ads.adfox.ru/211012/getDefaultImage?pp=h&amp;ps=bkqy&amp;p2=u" border="0" alt=""></a></iframe>
</noscript>
<!--AdFox END-->


<!--AdFox START-->
<!--giraffe-->
<!--Площадка: Весёлый Жираф / * / *-->
<!--Тип баннера: Безразмерный 240x400-->
<!--Расположение: &lt;сайдбар&gt;-->
<script type="text/javascript">
<!--
if (typeof(pr) == 'undefined') { var pr = Math.floor(Math.random() * 1000000); }
if (typeof(document.referrer) != 'undefined') {
  if (typeof(afReferrer) == 'undefined') {
    afReferrer = escape(document.referrer);
  }
} else {
  afReferrer = '';
}
var addate = new Date();
document.write('<scr' + 'ipt type="text/javascript" src="http://ads.adfox.ru/211012/prepareCode?pp=dey&amp;ps=bkqy&amp;p2=etcx&amp;pct=a&amp;plp=a&amp;pli=a&amp;pop=a&amp;pr=' + pr +'&amp;pt=b&amp;pd=' + addate.getDate() + '&amp;pw=' + addate.getDay() + '&amp;pv=' + addate.getHours() + '&amp;prr=' + afReferrer + '"><\/scr' + 'ipt>');
// -->
</script>
<!--AdFox END-->








<!--AdFox START-->
<!--giraffe-->
<!--Площадка: Весёлый Жираф / * / *-->
<!--Тип баннера: Безразмерный 240x400-->
<!--Расположение: &lt;сайдбар&gt;-->
<!-- ________________________AdFox Asynchronous code START__________________________ -->
<script type="text/javascript">
<!--
if (typeof(pr) == 'undefined') { var pr = Math.floor(Math.random() * 1000000); }
if (typeof(document.referrer) != 'undefined') {
  if (typeof(afReferrer) == 'undefined') {
    afReferrer = escape(document.referrer);
  }
} else {
  afReferrer = '';
}
var addate = new Date();
var dl = escape(document.location);
var pr1 = Math.floor(Math.random() * 1000000);

document.write('<div id="AdFox_banner_'+pr1+'"><\/div>');
document.write('<div style="visibility:hidden; position:absolute;"><iframe id="AdFox_iframe_'+pr1+'" width=1 height=1 marginwidth=0 marginheight=0 scrolling=no frameborder=0><\/iframe><\/div>');

AdFox_getCodeScript(1,pr1,'http://ads.adfox.ru/211012/prepareCode?pp=dey&amp;ps=bkqy&amp;p2=etcx&amp;pct=a&amp;plp=a&amp;pli=a&amp;pop=a&amp;pr=' + pr +'&amp;pt=b&amp;pd=' + addate.getDate() + '&amp;pw=' + addate.getDay() + '&amp;pv=' + addate.getHours() + '&amp;prr=' + afReferrer + '&amp;dl='+dl+'&amp;pr1='+pr1);
// -->
</script>
<!-- _________________________AdFox Asynchronous code END___________________________ -->
<!--AdFox END-->



















<!--AdFox START-->
<!--giraffe-->
<!--Площадка: Весёлый Жираф / * / *-->
<!--Тип баннера: Безразмерный 240x400-->
<!--Расположение: &lt;сайдбар&gt;-->
<script type="text/javascript">
    <!--
    if (typeof(pr) == 'undefined') { var pr = Math.floor(Math.random() * 1000000); }
    if (typeof(document.referrer) != 'undefined') {
        if (typeof(afReferrer) == 'undefined') {
            afReferrer = escape(document.referrer);
        }
    } else {
        afReferrer = '';
    }
    var addate = new Date();
    document.write('<scr' + 'ipt type="text/javascript" src="http://ads.adfox.ru/211012/prepareCode?pp=dey&amp;ps=bkqy&amp;p2=etcx&amp;pct=a&amp;plp=a&amp;pli=a&amp;pop=a&amp;pr=' + pr +'&amp;pt=b&amp;pd=' + addate.getDate() + '&amp;pw=' + addate.getDay() + '&amp;pv=' + addate.getHours() + '&amp;prr=' + afReferrer + '"><\/scr' + 'ipt>');
    // -->
</script>
<!--AdFox END-->













<!--AdFox START-->
<!--giraffe-->
<!--Площадка: Весёлый Жираф / * / *-->
<!--Тип баннера: Безразмерный 240x400-->
<!--Расположение: &lt;сайдбар&gt;-->
<script type="text/javascript">
    <!--
    if (typeof(pr) == 'undefined') { var pr = Math.floor(Math.random() * 1000000); }
    if (typeof(document.referrer) != 'undefined') {
        if (typeof(afReferrer) == 'undefined') {
            afReferrer = escape(document.referrer);
        }
    } else {
        afReferrer = '';
    }
    var addate = new Date();
    document.write('<scr' + 'ipt type="text/javascript" src="http://ads.adfox.ru/211012/prepareCode?pp=dey&amp;ps=bkqy&amp;p2=etcx&amp;pct=a&amp;plp=a&amp;pli=a&amp;pop=a&amp;pr=' + pr +'&amp;pt=b&amp;pd=' + addate.getDate() + '&amp;pw=' + addate.getDay() + '&amp;pv=' + addate.getHours() + '&amp;prr=' + afReferrer + '"><\/scr' + 'ipt>');
    // -->
</script>
<!--AdFox END-->





<!-- ________________________AdFox Asynchronous code START__________________________ -->
<script type="text/javascript">
<!--
if (typeof(pr) == 'undefined') { var pr = Math.floor(Math.random() * 1000000); }
if (typeof(document.referrer) != 'undefined') {
  if (typeof(afReferrer) == 'undefined') {
    afReferrer = escape(document.referrer);
  }
} else {
  afReferrer = '';
}
var addate = new Date();
var dl = escape(document.location);
var pr1 = Math.floor(Math.random() * 1000000);

document.write('<div id="AdFox_banner_'+pr1+'"><\/div>');
document.write('<div style="visibility:hidden; position:absolute;"><iframe id="AdFox_iframe_'+pr1+'" width=1 height=1 marginwidth=0 marginheight=0 scrolling=no frameborder=0><\/iframe><\/div>');

AdFox_getCodeScript(1,pr1,'http://ads.adfox.ru/211012/prepareCode?pp=dey&amp;ps=bkqy&amp;p2=etcx&amp;pct=a&amp;plp=a&amp;pli=a&amp;pop=a&amp;pr=' + pr +'&amp;pt=b&amp;pd=' + addate.getDate() + '&amp;pw=' + addate.getDay() + '&amp;pv=' + addate.getHours() + '&amp;prr=' + afReferrer + '&amp;dl='+dl+'&amp;pr1='+pr1);
// -->
</script>
<!-- _________________________AdFox Asynchronous code END___________________________ -->















<!--AdFox START-->
<!--giraffe-->
<!--Площадка: Весёлый Жираф / * / *-->
<!--Тип баннера: Безразмерный 240x400-->
<!--Расположение: &lt;сайдбар&gt;-->
<script type="text/javascript">
    <!--
    if (typeof(pr) == 'undefined') { var pr = Math.floor(Math.random() * 1000000); }
    if (typeof(document.referrer) != 'undefined') {
        if (typeof(afReferrer) == 'undefined') {
            afReferrer = escape(document.referrer);
        }
    } else {
        afReferrer = '';
    }
    var addate = new Date();
    document.write('<scr' + 'ipt type="text/javascript" src="http://ads.adfox.ru/211012/prepareCode?pp=dey&amp;ps=bkqy&amp;p2=etcx&amp;pct=a&amp;plp=a&amp;pli=a&amp;pop=a&amp;pr=' + pr +'&amp;pt=b&amp;pd=' + addate.getDate() + '&amp;pw=' + addate.getDay() + '&amp;pv=' + addate.getHours() + '&amp;prr=' + afReferrer + '"><\/scr' + 'ipt>');
    // -->
</script>
<!--AdFox END-->


<!--AdFox START-->
<!--giraffe-->
<!--Площадка: Весёлый Жираф / * / *-->
<!--Тип баннера: Безразмерный 240x400-->
<!--Расположение: &lt;сайдбар&gt;-->
<!-- ________________________AdFox Asynchronous code START__________________________ -->
<script type="text/javascript">
<!--
if (typeof(pr) == 'undefined') { var pr = Math.floor(Math.random() * 1000000); }
if (typeof(document.referrer) != 'undefined') {
  if (typeof(afReferrer) == 'undefined') {
    afReferrer = escape(document.referrer);
  }
} else {
  afReferrer = '';
}
var addate = new Date();
var dl = escape(document.location);
var pr1 = Math.floor(Math.random() * 1000000);

document.write('<div id="AdFox_banner_'+pr1+'"><\/div>');
document.write('<div style="visibility:hidden; position:absolute;"><iframe id="AdFox_iframe_'+pr1+'" width=1 height=1 marginwidth=0 marginheight=0 scrolling=no frameborder=0><\/iframe><\/div>');

AdFox_getCodeScript(1,pr1,'http://ads.adfox.ru/211012/prepareCode?pp=dey&amp;ps=bkqy&amp;p2=etcx&amp;pct=a&amp;plp=a&amp;pli=a&amp;pop=a&amp;pr=' + pr +'&amp;pt=b&amp;pd=' + addate.getDate() + '&amp;pw=' + addate.getDay() + '&amp;pv=' + addate.getHours() + '&amp;prr=' + afReferrer + '&amp;dl='+dl+'&amp;pr1='+pr1);
// -->
</script>
<!-- _________________________AdFox Asynchronous code END___________________________ -->
<!--AdFox END-->

iez7Phej


SELECT *
FROM messaging__threads_users tu
# Получение id собеседника
INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != tu.user_id
# Находится ли в чёрном списке
LEFT OUTER JOIN blacklist b ON b.user_id = tu.user_id AND b.blocked_user_id = tu2.user_id
WHERE tu.user_id = 83 AND b.user_id IS NULL AND tu2.user_id = 15545

SELECT tu.user_id AS user1_id, tu2.user_id AS user2_id, COUNT(*) AS C
FROM messaging__threads_users tu
INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != tu.user_id
INNER JOIN messaging__threads t ON t.id = tu.thread_id
GROUP BY tu.user_id, tu2.user_id
HAVING C > 1

SELECT t.id
FROM messaging__threads_users tu
INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != tu.user_id
INNER JOIN messaging__threads t ON t.id = tu.thread_id
INNER JOIN (
  SELECT tu.user_id AS user1_id, tu2.user_id AS user2_id, COUNT(*) AS C
  FROM messaging__threads_users tu
  INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != tu.user_id
  INNER JOIN messaging__threads t ON t.id = tu.thread_id
  GROUP BY tu.user_id, tu2.user_id
  HAVING C > 1
  ) x
ON tu.user_id = x.user1_id AND tu2.user_id = x.user2_id
ORDER BY tu.user_id ASC, tu2.user_id ASC, created ASC;


SELECT t.id
FROM messaging__threads_users tu
INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != tu.user_id
INNER JOIN messaging__threads t ON t.id = tu.thread_id
INNER JOIN (
  SELECT tu.user_id AS user1_id, tu2.user_id AS user2_id, COUNT(*) AS C
  FROM messaging__threads_users tu
  INNER JOIN messaging__threads_users tu2 ON tu.thread_id = tu2.thread_id AND tu2.user_id != tu.user_id
  INNER JOIN messaging__threads t ON t.id = tu.thread_id
  GROUP BY tu.user_id, tu2.user_id
  HAVING C > 1
  ) x
ON tu.user_id = x.user1_id AND tu2.user_id = x.user2_id
GROUP BY tu.user_id, tu2.user_id
ORDER BY tu.user_id ASC, tu2.user_id ASC, created ASC;




var AdFox_object_%random% = '';
var plug_url_%random% = 'http://www.happy-giraffe.ru/direct.html';
var AdFox_variable_%random% = 0;
var AdFox_id_%random% = 'AdFox_banner_%random1%';
var AdFox_yn_%random% = 0;
var AdFox_pdoc_%random% = parent.document;
    if(AdFox_pdoc_%random% != document){
	   var AdFox_pde_%random% = AdFox_pdoc_%random%.getElementById(AdFox_id_%random%);
	   var AdFox_yn_%random% = AdFox_pde_%random%?1:0;
	   }
if (plug_url_%random% != '') {
    AdFox_variable_%random% = 1;
    AdFox_object_%random% += (Math.floor(Math.random() * 100) + 1) <= 10 ? '<a href="http://www.happy-giraffe.ru/contest/11/"><img src="http://www.happy-giraffe.ru/images/contest/banner-w240-11.jpg" alt="Фотоконкурс «Мы едем, едем, едем...»" /></a>' : '<iframe id="AdFox_plug_%random%" src="'+plug_url_%random%+'" width=240 height=400 marginwidth=0 marginheight=0 scrolling=no frameborder=0></iframe>';
    }else{
       AdFox_variable_%random% = 1;
	   AdFox_object_%random% += '<div id="AdFox_tracking_%random%" width="0px" height="0px" style="z-index:12345678; position:absolute;"><img src="http://banners.adfox.ru/transparent.gif" border="0" width="0" height="0"></div>';
	}

if(AdFox_yn_%random%){
   if(AdFox_variable_%random%){
      AdFox_pde_%random%.innerHTML = AdFox_object_%random%;
   }
   setTimeout("document.close();", 1000);
   }else{document.write(AdFox_object_%random%);}